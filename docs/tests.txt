Как известно, при создании типичного программного проекта около 50% общего времени и более 50% общей 
стоимости расходуется на проверку (тестирование) разрабатываемой программы или системы. 
Кроме того, доля стоимости тестирования в общей стоимости программ имеет тенденцию возрастать 
при увеличении сложности комплексов программ и повышения требований к их качеству.

Учитывая это, при отработке технологии тестирования программ следует четко выделять определенное 
(по возможности не очень большое) число правил отладки, обеспечивающих высокое качество 
программного продукта и снижающих затраты на его создание. 

Процесс разработки программного обеспечения, в том виде, как он определяется 
в современной модели жизненного цикла программного обеспечения, предполагает 
три стадии тестирования:

•	автономное тестирование компонентов программного обеспечения;
•	комплексное тестирование разрабатываемого программного обеспечения;
•	системное или оценочное тестирование на соответствие основным критериям качества.

Для повышения качества тестирования рекомендуется соблюдать следующие основные принципы:
•	предполагаемые результаты должны быть известны до тестирования;
•	следует избегать тестирования программы автором;
•	необходимо досконально изучать результаты каждого теста;
•	необходимо проверять действия программы на неверных данных;
•	необходимо проверять программу на неожиданные побочные эффекты на неверных данных.

В соответствии с определением тестирования в начале данного параграфа, удачным следует 
считать тест, который обнаруживает хотя бы одну ошибку. Существуют два принципиально 
различных подхода к формированию тестовых наборов: структурный и функциональный. 
Структурный подход базируется на том, что известка структура тестируемого программного 
обеспечения, в том числе его алгоритмы («стеклянный ящик»). В этом случае тесты строят 
так, чтобы проверить правильность реализации заданной логики в коде программы.

Функциональный подход основывается на том, что структура программного обеспечения не 
известна («черный ящик»). В этом случае тесты строят, опираясь на функциональные спецификации. 
Этот подход называют также подходом, управляемым данными, так как при его использовании 
тесты строят на базе различных способов декомпозиции множества данных.
