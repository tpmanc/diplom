Уважаемые члены государственной экзаменационной комиссии, вашему вниманию предлагается дипломный проект на тему репозиторий инсталляционных пакетов корпоративной сети.
Актуальность данной темы обусловлена тем, что на предприятии используется большое количество разнообразного программного обеспечения. 
В настоящее время для хранения инсталляционных пакетов работники АО "ВПК "НПО машиностроения" используют свои рабочие компьютеры. Такой способ хранения приводит к тому, что одни и те же файлы хранятся на разных компьютерах, занимают место на диске. К тому же, даже на одном компьютере файлы могут дублироваться. Для поиска необходимого инсталляционного пакета и передачи его другому работнику может потребоваться много времени. 
в чем проблема
Никто не знал где хранится последняя версия, приходилось лезть в интернет и скачивать копию одного и того же
Они хранились не структурировано и не было возможности привязки пакетов к нескольким категориям сразу
автоматизированный экспорт в системы распространения ПО (SCCM и любым другим, например репозитории СПО), сейчас это происходит вручную
Моя система дополняет те системы, она незамещаема, у них нет такого функционала
Для того, чтобы решить данную проблему возникла необходимость в разработке репозитория инсталляционных пакетов корпоративной сети, который предназначен для централизованного и упорядоченного хранения инсталляционных пакетов.
Целью дипломной работы является создание репозитория инсталляционных пакетов корпоративной сети, который должен решать следующие задачи (1 плакат - задачи):
сквозная аутентификация через AD; 
регистрация, принятие и отклонение заявок от пользователей на добавление инсталляционных пакетов; 
добавление и удаление инсталляционных пакетов; 
заполнение, просмотр и изменение информации об инсталляционных пакетах; 
автоматическое извлечение свойств из файлов формата PE; 
выгрузка инсталляционных пакетов с сервера; 
просмотр каталога инсталляционных пакетов; 
просмотр списка инсталляционных пакетов; 
создание, изменение и удаление категорий для группировки инсталляционных пакетов; 
привязка инсталляционных пакетов к категориям; 
просмотр списка незаполненных инсталляционных пакетов; 
изменение настроек приложения; 
выполнение скриптов.
В исследовательском разделе был проведен анализ программного обеспечения, которое решает похожие задачи, анализ видов архитектур и выбор архитектуры для разрабатываемой системы.
При исследовании аналогов было выявлено, что все они имеют недостатки: некоторые из систем больше ориентированы на работу с документами, некоторые не поддерживают протокол LDAP, а некоторые требуют покупки коммерческой версии.
Результат анализа видов архитектур представлен на плакате 2. На основе выявленных достоинств и недостатков каждой архитектуры была выбрана трехзвенная архитектура "клиент-сервер".
Разрабатываемую системы было решено реализовывать как веб-приложение, так как такой подход позволит работать с системой без установки и настройки клиентского приложения на рабочие места. Для работы с веб-приложением необходим только браузер, который предустановлен в операционных системах.
В конструкторском разделе, для уточнений требований к функциональности системы были составлена диаграмма вариантов использования, которая представлена на плакате 3.На следующем шаге была выбрана программная платформа для реализации разрабатываемой системы.
Так как в исследовательской части был решено использовать трехзвенную архитектуру "клиент-сервер", то необходимо выбрать сервер приложений. В качестве сервера приложений был выбран WildFly. Для ускорения процесса разработки было решено использовать фреймворк, в качестве которого был выбран Spring Framework. На следующем этапе была проведена объектная декомпозиция, после чего была разработаны классы. Диаграмма классов представлена на плакате 4. 
Так как в ТЗ указано что данные должны храниться в СУБД PostgreSQL, то для ее реализации была разработана структура данных. На плакате 5 представлена диаграмма "сущность-связь" для описания базы данных.
Следующим этапом конструкторской части была разработка пользовательского интерфейса. Пример внешнего вида пользовательского интерфейса представлен на плакате 6. На следующем шаге были разработаны алгоритмы, за счет которых разработанная системы выполняет требуемый от нее функционал.
Для уточнений особенностей процессов аутентификации, просмотра каталога инсталляционных пакетов и алгоритма добавления нового инсталляционного пакета была сделана диаграмма последовательностей, представленная на плакате 7. После этого были разработаны диаграммы активности, которые представлены на плакате 8.
Спроектированные в соответствии со спецификацией части были скомпонованы в дистрибутивную версию, диаграмма компоновки представлена на плакате 9.
В технологической части был осуществлен выбор стратегии тестирования и тестирование разработанной системы. Схема процесса тестирование с разбиением на этапы разработки представлена на плакате 10.
В организационно-экономическом разделе был определен структура этапов работы, произведен расчет трудоемкости проекта, определено число исполнителей, построен сетевой график и календарный план выполнения работ.
В разделе охраны труда были проанализированы негативные факторы на рабочем месте инженера-исследователя, произведен расчет естественного освещения.
В ходе выполнения дипломного проекта все поставленные задачи были выполнены в полном объеме и в соответствии с предъявляемыми требованиям. Был разработан гибкий (максимально унифицированный) интерфейс для сопряжения с другими системами, например SCCM. Разработанная система внедрена в опытную эксплуатацию по отделу 28-01. Доклад окончен, спасибо за внимание.
(Диаграмма последовательностей показывает общую динамику процесса.)

Для извлечения свойств из файлов других форматов была добавлена возможность исполнения команд